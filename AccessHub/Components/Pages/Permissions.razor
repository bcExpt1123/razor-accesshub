@page "/permissions"
@rendermode InteractiveServer
@using AccessHub.Components.Utils
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@using AccessHub.Services
@using AccessHub.Models
@using AccessHub.Utils
@using System.Globalization
@inject ILogger<Permissions> Logger
@inject IJSRuntime JS
@inject IPermissionService PermissionService

<PageTitle>Permissions</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Permissions</h1>
    <button class="btn btn-primary" @onclick="() => OpenDialog()">
        <span class="bi bi-plus-circle me-2"></span>
        Add Permission
    </button>
</div>

<div class="card">
    <div class="card-body">
        @if (permissions == null)
        {
            <div class="text-center p-3">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (!permissions.Any())
        {
            <div class="alert alert-info">
                No permissions found. Click the "Add Permission" button to create one.
            </div>
        }
        else
        {
            <div class="mb-3">
                <PaginationControl 
                    PageNumber="@currentPage"
                    PageSize="@pageSize"
                    TotalCount="@totalCount"
                    OnPageChange="@HandlePageChange"
                    OnPageSizeChange="@HandlePageSizeChange" />
            </div>
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Resource/Group</th>
                            <th>Permissions</th>
                            <th>Description</th>
                            <th>Created</th>
                            <th>Updated</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var group in groupedPermissions)
                        {
                            var isFirst = true;
                            var groupId = $"group-{group.Key.Replace(" ", "-").ToLowerInvariant()}";
                            @foreach (var permission in group.OrderBy(p => p.Name))
                            {
                                <tr class="group-@groupId" @onmouseover="() => HighlightGroup(groupId)" @onmouseout="() => UnhighlightGroup(groupId)">
                                    @if (isFirst)
                                    {
                                        <td rowspan="@group.Count()" class="align-middle resource-cell">
                                            <span class="group-name">@GetDisplayGroupKey(group.Key)</span>
                                        </td>
                                        isFirst = false;
                                    }
                                    <td class="action-cell">@permission.Name.Split(' ')[0]</td>
                                    <td>@permission.Description</td>
                                    <td>@permission.CreatedAt.ToFormattedDateTime()</td>
                                    <td>@permission.UpdatedAt.ToFormattedDateTime()</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary me-2" 
                                                    @onclick="() => EditPermission(permission)"
                                                    title="Edit Permission">
                                                <i class="bi bi-pencil-fill"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" 
                                                    @onclick="() => DeletePermissionWithConfirm(permission)"
                                                    title="Delete Permission">
                                                <i class="bi bi-trash-fill"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
            <div class="mt-3">
                <PaginationControl 
                    PageNumber="@currentPage"
                    PageSize="@pageSize"
                    TotalCount="@totalCount"
                    OnPageChange="@HandlePageChange"
                    OnPageSizeChange="@HandlePageSizeChange" />
            </div>
        }
    </div>
</div>

<Dialog 
    IsVisible="@isDialogVisible"
    Title="@(permissionToEdit == null ? "Add New Permission" : "Edit Permission")"
    SaveButtonText="@(permissionToEdit == null ? "Create" : "Update")"
    OnCloseClick="@CloseDialog"
    OnSaveClick="@SavePermission">
    <div class="mb-3">
        <label for="permissionName" class="form-label">Permission Name</label>
        <input type="text" class="form-control" id="permissionName" @ref="nameInput" @bind="newPermissionName">
        @if (!string.IsNullOrEmpty(nameError))
        {
            <div class="text-danger mt-1">@nameError</div>
        }
    </div>
    <div class="mb-3">
        <label for="permissionDescription" class="form-label">Description</label>
        <textarea class="form-control" id="permissionDescription" rows="3" @bind="newPermissionDescription"></textarea>
    </div>
</Dialog>

<ConfirmDialog 
    IsVisible="@isConfirmDialogVisible"
    Title="Delete Permission"
    Message="@confirmDialogMessage"
    ConfirmButtonText="Delete"
    ConfirmButtonClass="btn-danger"
    OnConfirm="@ConfirmDelete"
    OnCancel="@(() => isConfirmDialogVisible = false)" />

<AlertDialog 
    IsVisible="@isAlertDialogVisible"
    Title="@alertDialogTitle"
    Message="@alertDialogMessage"
    ButtonText="Close"
    ButtonClass="@(alertDialogMessage.Contains("successfully") ? "btn-success" : "btn-danger")"
    ShowSecondaryButton="@showAddMoreButton"
    SecondaryButtonText="Add more"
    OnClose="@(() => isAlertDialogVisible = false)"
    OnSecondaryAction="@(() => { isAlertDialogVisible = false; OpenDialog(); })" />

@code {
    private IEnumerable<Permission>? permissions;
    private IEnumerable<IGrouping<string, Permission>>? groupedPermissions;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalCount;
    private bool isDialogVisible;
    private bool isConfirmDialogVisible;
    private bool isAlertDialogVisible;
    private bool showAddMoreButton;
    private string confirmDialogMessage = "";
    private string alertDialogTitle = "";
    private string alertDialogMessage = "";
    private string newPermissionName = "";
    private string newPermissionDescription = "";
    private string nameError = "";
    private Permission? permissionToEdit;
    private ElementReference nameInput;

    protected override async Task OnInitializedAsync()
    {
        await LoadPermissions();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isDialogVisible)
        {
            try { await nameInput.FocusAsync(); }
            catch (Exception ex) { Logger.LogError(ex, "Error focusing permission name input"); }
        }
    }

    private string GetGroupKey(string permissionName)
    {
        var parts = permissionName.Split(new[] { ' ' }, 2);
        return (parts.Length > 1 ? parts[1] : permissionName).ToLowerInvariant();
    }

    private string GetDisplayGroupKey(string groupKey) =>
        string.Join(" ", groupKey.Split(' ')
            .Select(word => char.ToUpperInvariant(word[0]) + word[1..]));

    private async Task LoadPermissions()
    {
        try
        {
            var result = await PermissionService.GetPaginatedPermissionsAsync(new PaginationParams 
            { 
                PageNumber = currentPage, 
                PageSize = pageSize 
            });
            
            permissions = result.Items;
            totalCount = result.TotalCount;
            groupedPermissions = permissions
                .GroupBy(p => GetGroupKey(p.Name))
                .OrderBy(g => g.Key);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading permissions");
            ShowAlert("Error", "Failed to load permissions. Please try again.");
        }
    }

    private void OpenDialog()
    {
        isDialogVisible = true;
        nameError = "";
        if (permissionToEdit == null)
        {
            newPermissionName = "";
            newPermissionDescription = "";
        }
    }

    private async Task EditPermission(Permission permission)
    {
        try
        {
            permissionToEdit = permission;
            newPermissionName = permission.Name;
            newPermissionDescription = permission.Description ?? "";
            nameError = "";
            OpenDialog();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error preparing permission edit");
            ShowAlert("Error", "Failed to prepare permission edit. Please try again.");
        }
    }

    private void DeletePermissionWithConfirm(Permission permission)
    {
        if (permission == null) return;
        
        confirmDialogMessage = $"Are you sure you want to delete the permission '<strong>{permission.Name}</strong>'?<br><br>This action cannot be undone.";
        permissionToEdit = permission;
        isConfirmDialogVisible = true;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            if (permissionToEdit == null) return;

            if (await PermissionService.DeletePermissionAsync(permissionToEdit.Id))
            {
                var deletedName = permissionToEdit.Name;
                await LoadPermissions();
                ShowAlert("Success", $"Permission '<strong>{deletedName}</strong>' has been deleted successfully.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting permission");
            ShowAlert("Error", "Failed to delete permission. Please try again.");
        }
        finally
        {
            isConfirmDialogVisible = false;
            permissionToEdit = null;
        }
    }

    private void CloseDialog()
    {
        isDialogVisible = false;
        permissionToEdit = null;
        newPermissionName = "";
        newPermissionDescription = "";
        nameError = "";
    }

    private void ShowAlert(string title, string message, bool showAddMore = false)
    {
        alertDialogTitle = title;
        alertDialogMessage = message;
        showAddMoreButton = showAddMore;
        isAlertDialogVisible = true;
    }

    private async Task SavePermission()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(newPermissionName))
            {
                nameError = "Permission name is required";
                return;
            }

            var permission = permissionToEdit ?? new Permission();
            permission.Name = newPermissionName;
            permission.Description = newPermissionDescription;

            if (permissionToEdit == null)
            {
                await PermissionService.CreatePermissionAsync(permission);
                await LoadPermissions();
                CloseDialog();
                ShowAlert("Success", $"Permission '<strong>{permission.Name}</strong>' has been created successfully.", true);
            }
            else
            {
                var result = await PermissionService.UpdatePermissionAsync(permission);
                if (result != null)
                {
                    await LoadPermissions();
                    CloseDialog();
                    ShowAlert("Success", $"Permission '<strong>{permission.Name}</strong>' has been updated successfully.");
                }
            }
        }
        catch (InvalidOperationException ex)
        {
            nameError = ex.Message;
            Logger.LogWarning(ex, "Validation error in SavePermission");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in SavePermission method");
            ShowAlert("Error", "Failed to save permission. Please try again.");
        }
    }

    private async Task HighlightGroup(string groupId)
    {
        await JS.InvokeVoidAsync("eval", $"document.querySelectorAll('.group-{groupId}').forEach(row => row.classList.add('highlight-group'))");
    }

    private async Task UnhighlightGroup(string groupId)
    {
        await JS.InvokeVoidAsync("eval", $"document.querySelectorAll('.group-{groupId}').forEach(row => row.classList.remove('highlight-group'))");
    }

    private async Task HandlePageChange(int newPage)
    {
        if (currentPage != newPage)
        {
            currentPage = newPage;
            await LoadPermissions();
        }
    }

    private async Task HandlePageSizeChange(int newPageSize)
    {
        if (pageSize != newPageSize)
        {
            pageSize = newPageSize;
            currentPage = 1;
            await LoadPermissions();
        }
    }
} 