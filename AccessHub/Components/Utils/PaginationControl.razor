@using AccessHub.Models

<div class="d-flex justify-content-between align-items-center">
    <div class="d-flex align-items-center">
        <span class="me-2">Items per page:</span>
        <select class="form-select form-select-sm" style="width: auto;" @bind="SelectedPageSize">
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="25">25</option>
            <option value="50">50</option>
        </select>
    </div>
    <div class="d-flex align-items-center">
        <span class="me-3">
            @(((PageNumber - 1) * PageSize) + 1)-@(Math.Min(PageNumber * PageSize, TotalCount)) of @TotalCount items
        </span>
        <nav>
            <ul class="pagination mb-0">
                <li class="page-item @(PageNumber <= 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => OnPageChange.InvokeAsync(1)" disabled="@(PageNumber <= 1)">
                        <span aria-hidden="true">&laquo;&laquo;</span>
                    </button>
                </li>
                <li class="page-item @(PageNumber <= 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => OnPageChange.InvokeAsync(PageNumber - 1)" disabled="@(PageNumber <= 1)">
                        <span aria-hidden="true">&laquo;</span>
                    </button>
                </li>
                @foreach (var pageNum in GetVisiblePages())
                {
                    var currentPage = pageNum;
                    <li class="page-item @(pageNum == PageNumber ? "active" : "")">
                        <button class="page-link" @onclick="() => OnPageChange.InvokeAsync(currentPage)">
                            @pageNum
                        </button>
                    </li>
                }
                <li class="page-item @(PageNumber >= TotalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => OnPageChange.InvokeAsync(PageNumber + 1)" disabled="@(PageNumber >= TotalPages)">
                        <span aria-hidden="true">&raquo;</span>
                    </button>
                </li>
                <li class="page-item @(PageNumber >= TotalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => OnPageChange.InvokeAsync(TotalPages)" disabled="@(PageNumber >= TotalPages)">
                        <span aria-hidden="true">&raquo;&raquo;</span>
                    </button>
                </li>
            </ul>
        </nav>
    </div>
</div>

@code {
    [Parameter]
    public int PageNumber { get; set; } = 1;

    [Parameter]
    public int PageSize { get; set; } = 10;

    [Parameter]
    public int TotalCount { get; set; }

    [Parameter]
    public EventCallback<int> OnPageChange { get; set; }

    [Parameter]
    public EventCallback<int> OnPageSizeChange { get; set; }

    private int TotalPages => (int)Math.Ceiling(TotalCount / (double)PageSize);

    private List<int> GetVisiblePages()
    {
        var pages = new List<int>();
        var totalPages = TotalPages;

        if (totalPages <= 7)
        {
            // Show all pages if total pages are 7 or less
            pages.AddRange(Enumerable.Range(1, totalPages));
        }
        else
        {
            // Always show first page
            pages.Add(1);

            if (PageNumber <= 4)
            {
                // Show first 5 pages + ellipsis + last page
                pages.AddRange(Enumerable.Range(2, 4));
                pages.Add(-1); // Ellipsis
                pages.Add(totalPages);
            }
            else if (PageNumber >= totalPages - 3)
            {
                // Show first page + ellipsis + last 5 pages
                pages.Add(-1); // Ellipsis
                pages.AddRange(Enumerable.Range(totalPages - 4, 4));
                pages.Add(totalPages);
            }
            else
            {
                // Show first page + ellipsis + current-2 to current+2 + ellipsis + last page
                pages.Add(-1); // Ellipsis
                pages.AddRange(Enumerable.Range(PageNumber - 2, 5));
                pages.Add(-1); // Ellipsis
                pages.Add(totalPages);
            }
        }

        return pages;
    }

    private int _selectedPageSize;
    private int SelectedPageSize
    {
        get => _selectedPageSize;
        set
        {
            if (_selectedPageSize != value)
            {
                _selectedPageSize = value;
                OnPageSizeChange.InvokeAsync(value);
            }
        }
    }

    protected override void OnParametersSet()
    {
        _selectedPageSize = PageSize;
        base.OnParametersSet();
    }
} 